发送查询
==============

查询数据库的当前版本：

::

    MariaDB [(none)]> SELECT VERSION();
    +-----------------------------+
    | VERSION()                   |
    +-----------------------------+
    | 10.0.9-MariaDB-1~wheezy-log |
    +-----------------------------+
    1 row in set (0.01 sec)

因为关键字\ *不限制大小写*\ ，所以以下语句和上面的语句产生同样的效果：

::

    SELECT VERSION();
    select version();
    SeLeCt VeRsIoN();

还可以在一行里面输入多个查询，
只要使用分号（\ ``;``\ ）来隔开各个查询就可以了：

::

    MariaDB [(none)]> SELECT VERSION(); SELECT NOW();
    +-----------------------------+
    | VERSION()                   |
    +-----------------------------+
    | 10.0.9-MariaDB-1~wheezy-log |
    +-----------------------------+
    1 row in set (0.00 sec)

    +---------------------+
    | NOW()               |
    +---------------------+
    | 2014-03-14 21:40:22 |
    +---------------------+
    1 row in set (0.00 sec)

因为客户端根据分号而不是行数来判断查询是否完整，
所以我们可以将一个查询分到多个行里面：

::

    MariaDB [(none)]> SELECT
    -> USER()
    -> ;
    +----------------+
    | USER()         |
    +----------------+
    | root@localhost |
    +----------------+
    1 row in set (0.00 sec)

注意，
在将一个查询分到多个行里面写入时，
客户端的提示符从原来的 ``>`` 变成了 ``->`` ，
这表示客户端正在等待后续的输入。

下表展示了一些可能在客户端里面出现的提示符，
以及这些提示符的意义：

=========   =================================================================================================
提示符      意义
=========   =================================================================================================
``>``       等待新查询的输入。
``->``      等待新的多行输入。
``'>``      等待新的多行输入，以及一个以 ``'`` 开始的字符串的结尾。
``">``      等待新的多行输入，以及一个以 ``"`` 开始的字符串的结尾。
``\`>``     等待新的多行输入，以及一个以 ``\``` 符号开始的标识符的结尾。
``/*>``     等待新的多行输入，以及一个以 ``/*`` 开始的注释的结尾。
=========   =================================================================================================

如果在输入查询时键入了错误的内容，
那么可以输入 ``\c`` 来撤销已键入的查询：

::

    MariaDB [(none)]> SELECT 
    -> WRONG INPUT
    -> OOPS
    -> \c

